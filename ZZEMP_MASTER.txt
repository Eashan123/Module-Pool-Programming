" to do,
" create a report on click to display the values of cdhdr and cdpos after saving.

" for lock objects you dont need to call deque module because system does that automatically for you.
" to see if the object is locked you can visit sm12.
" blood group and dob have been marked as log objects, new data element has been added instead of sydatum and char5

" change log will be performed before saving.
REPORT ZZEMP_MASTER.

INCLUDE FYZEMP_MASTERCDT. "change log object, we need to copy paste.

*TABLES: ZZEMP_MASTER2.

DATA: gs_emp_master type zzemp_master2.
DATA: gs_emp_master_o type zzemp_master2. " this will hold the old values.
Data: gv_flag type flag.

DATA: garg like seqg3-garg, " this is for displaying the name of the user who has locked our object.
      enq like STANDARD TABLE OF seqg3 WITH HEADER LINE,
      gv_msg TYPE string.

DATA: gt_icdtxt TYPE STANDARD TABLE OF cdtxt, " this declaration is for log objects.
      gv_objectid TYPE cdhdr-objectid.

DATA: gv_cursor TYPE char50. " handling double click events.

Types: BEGIN OF ty_disp,
  empid TYPE zzemp_master2-empid,
  title TYPE zzemp_master2-title,
  first_name TYPE zzemp_master2-first_name,
  pan TYPE zzemp_master2-pan,
  mobile1 TYPE zzemp_master2-mobile1,
  END OF ty_disp.


Types: BEGIN OF tp_desig,  " on value request for ex.
  desig type zzemp_master2-designation,
  END OF tp_desig.

TYPES: BEGIN OF tp_family. " table control single
        Include STRUCTURE ZZEMP_FAMILY.

        TYPES: MARK, " this is for the selection of the screen.
        END OF tp_family.

DATA: gt_family TYPE STANDARD TABLE OF tp_family,
      gs_family type tp_family,
      gs_zzemp_family type zzemp_family.


DATA: gs_desig TYPE tp_desig,
      gt_desig TYPE STANDARD TABLE OF tp_desig.

data: it_disp type TABLE OF ty_disp,
      ws_disp type ty_disp.


DATA: R_M, R_F, R_U.

DATA: gv_id type vrm_id,
      gv_idb type vrm_id,
      gt_values type vrm_values,
      gs_values LIKE LINE OF gt_values.

DATA: gv_init.

DATA: gv_len type i,
      gv_ans. "len of pancard must be 10

Data: gt_state_city TYPE STANDARD TABLE OF zstate_city,
      gs_state_city TYPE zstate_city.

" Technical help is mostly provided at data element level.
" not at the program level but for learning we'll look at this.

DATA: gt_text TYPE TABLE OF tline INITIAL SIZE 1,
      gs_text TYPE tline.


SELECTION-SCREEN BEGIN OF BLOCK b1 WITH FRAME TITLE text01.

  PARAMETERS: p_empid type zzemp_master2-empid OBLIGATORY. " since it's a primary key


  SELECTION-SCREEN end of BLOCK b1.


  START-OF-SELECTION.

  " call enque function module program lock object.

  CALL FUNCTION 'ENQUEUE_EZZEMP_MASTER'
   EXPORTING
     MODE_ZZEMP_MASTER       = 'E'
     MANDT                   = SY-MANDT
     EMPID                   = P_EMPID " the id on which we are working, this we'll lock
*     X_EMPID                 = ' '
*     _SCOPE                  = '2'
*     _WAIT                   = ' '
*     _COLLECT                = ' '
   EXCEPTIONS
     FOREIGN_LOCK            = 1
     SYSTEM_FAILURE          = 2
     OTHERS                  = 3
            .
*  IF sy-subrc <> 0.
  IF sy-subrc = 1. " that is foreign lock
* Implement suitable error handling here

    " if suppose the object is already locked by other user you need to give a message.
    " for this use this function to display the name of the user who has locked your object.

    CONCATENATE sy-mandt p_empid INTO garg.

    " error no values getting stored in enq table.

    CALL FUNCTION 'ENQUE_READ'
     EXPORTING
       GCLIENT       = SY-MANDT
       GNAME         = 'zzemp_master' "the name of the table on which you want to put the lock.
       GARG          = GARG " in this you need to pass the client id and the primary key.
*       GUNAME        = SY-UNAME
*     IMPORTING
*       NUMBER        =
*       SUBRC         =
      TABLES
        enq           = ENQ " in the output you need to read this table
      EXCEPTIONS
        COMMUNICATION_FAILURE = 1
        SYSTEM_AILURE = 2
        OTHERS = 3.

        if sy-subrc <> 0.
          MESSAGE 'something went wrong' TYPE 'S'.
          endif.

              .

" read the first index of the table sm12 to get who has locked the object.

    READ TABLE enq INDEX 1.
    CONCATENATE 'the object is locked by the user ' enq-GUNAME INTO gv_msg SEPARATED BY space.

*    MESSAGE gv_msg TYPE 'S'.

" message class

    MESSAGE I002(ZEMP_MASTER) with enq-guname. " this will come as a small popup on the screen.
    MESSAGE S002(ZEMP_MASTER) with enq-guname. " this will come as a normal message on the footer of the screen.
    SET SCREEN 0.


*    MESSAGE 'the object is locked by other user' TYPE 'S'.
*    SET SCREEN 0.


  ELSE.


" this will show entries on the output screen.

  select SINGLE * from zzemp_master2 into CORRESPONDING FIELDS OF gs_emp_master
    where empid = p_empid.

    gs_emp_master-empid = p_empid.

      if gs_emp_master-gender = 'M'.

        r_m = 'X'.

ELSEIF gs_emp_master-gender = 'F'.
  r_f = 'X'.

  else.
    r_u = 'X'.

    endif.


" so for showing the values in 0200 that is family member.
" we will write the logic before the pbo module.

  SELECT * FROM zzemp_family INTO CORRESPONDING FIELDS OF TABLE gt_family
    WHERE empid = p_empid.

" in case of table this below thing doesn't work.
*
*  SELECT SINGLE * FROM zzemp_family INTO CORRESPONDING FIELDS OF gs_family
*    WHERE empid = p_empid.
*
*  gs_family-empid = p_empid.

    call SCREEN 0100.

    ENDIF.



  end-of-SELECTION.



*&---------------------------------------------------------------------*
*&      Module  STATUS_0100  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0100 OUTPUT.
  SET PF-STATUS 'PF2'.
  SET TITLEBAR 'T2'.

  if gv_init is INITIAL.
    PERFORM set_list_box.
    gv_init = 'X'.
    ENDIF.

  if gs_emp_master-marital_status ne 'M'.

    loop AT SCREEN.

      if screen-group1 = 'HD1'. " there are 4 groups.
"        screen-input = 0. " this will disable spouse field if I am single
        screen-active = 0. " this will disappear spouse field if I am single
        MODIFY SCREEN.

      endif.

      ENDLOOP.

      CLEAR: gs_emp_master-SPOUSE.

    ENDIF.


ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  EXT  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE ext INPUT.
SET SCREEN 0.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0100  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0100 INPUT.

* gs_emp_master-marital_status = 'S'. " if you want to set default value to be S single.

CASE SY-UCOMM.

  WHEN 'BACK' OR 'EXIT' OR 'CANCEL'.
    SET SCREEN 0.

  WHEN 'SAVE'.

    PERFORM save_confirmation.
    if gv_ans = '1'.
      PERFORM SAVE.
      ENDIF.

  WHEN 'STATE'.
    PERFORM set_state_city.

  WHEN 'GENDR'. "refer functoncode of male radio button
    if r_m is not INITIAL.
      gs_emp_master-TITLE = 'MR.'.

    ELSEIF r_f is NOT INITIAL.
      gs_emp_master-TITLE = 'MRS.'.
      ENDIF.



  WHEN 'DISP'.
    CALL SCREEN 0300

    STARTING AT 4 10
    ENDING AT 50 20.


  WHEN 'CLOSE'.
    LEAVE PROGRAM.

  WHEN 'PICK'.
    get CURSOR FIELD gv_cursor.

    if gv_cursor = 'GS_EMP_MASTER-EMPID'.
      CALL TRANSACTION 'XK03'.
      endif.

WHEN 'FAMILY'.
  CALL SCREEN 0200.

    ENDCASE.
  CLEAR: SY-UCOMM.



ENDMODULE.
*&---------------------------------------------------------------------*
*&      Form  SAVE
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM save .

if gs_emp_master-createdby is INITIAL.
  gs_emp_master-createdby = sy-uname.
  gs_emp_master-createdon = sy-datum.
  gs_emp_master-time = sy-uzeit.

  endif.

  if r_m is not INITIAL.

    gs_emp_master-gender = 'M'.

  ELSEIF r_f is not INITIAL.

    gs_emp_master-gender = 'F'.

*  ELSEIF r_u is not INITIAL.
*
*    gs_emp_master-gender = 'U'.

  else.
    gs_emp_master-gender = 'U'.

    endif.

  PERFORM change_log.

" header table
  modify zzemp_master2 from gs_emp_master.

" family member table.

  loop at gt_family INTO gs_family WHERE RELATIONSHIP is NOT INITIAL.

    CLEAR: gs_zzemp_family.

*    gs_zzemp_family-empid = p_empid.

    MOVE-CORRESPONDING gs_family to gs_zzemp_family.
    gs_zzemp_family-empid = p_empid.

    " before modifying the table we are calculating the age.

    if gs_zzemp_family-dob is not INITIAL.
      " we'll calculate age, one of the ways is.

      CALL FUNCTION 'HRCM_TIME_PERIOD_CALCULATE'
        EXPORTING
          begda               = gs_zzemp_family-dob
          endda               = sy-datum " calculate till system date
       IMPORTING
         NOYRS               =  gs_zzemp_family-age " in return we need age in years only
*         NOMNS               =
*         NODYS               =
       EXCEPTIONS
         INVALID_DATES       = 1
         OVERFLOW            = 2
         OTHERS              = 3
                .
      IF sy-subrc <> 0.
* Implement suitable error handling here
      ENDIF.


      ENDIF.

    MODIFY zzemp_family from gs_zzemp_family.

    CLEAR gs_family.

    ENDLOOP.

  MESSAGE 'Data saved successfully' type 'S'.

  SET SCREEN 0.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_LIST_BOX
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_list_box .

CLEAR: gt_values[], gs_values.

gs_values-key = 'MR.'.
APPEND gs_values to gt_values.

gs_values-key = 'MRS.'.
APPEND gs_values to gt_values.

gs_values-key = 'MISS.'.
APPEND gs_values to gt_values.

SORT gt_values by key.
Delete ADJACENT DUPLICATES FROM gt_values COMPARING key.

gv_id = 'gs_emp_master-TITLE'.

CALL FUNCTION 'VRM_SET_VALUES'
  EXPORTING
    id                    = gv_id
    values                = gt_values
 EXCEPTIONS
   ID_ILLEGAL_NAME       = 1
   OTHERS                = 2.
IF sy-subrc <> 0.
* Implement suitable error handling here
  MESSAGE 'something wrong has happened, we need to debug what' type 'E'.
ENDIF.

CLEAR: gs_values, gt_values[].


"""""""""""""""


gs_values-key = 'A+'.
APPEND gs_values to gt_values.

gs_values-key = 'B+'.
APPEND gs_values to gt_values.

gs_values-key = 'AB+'.
APPEND gs_values to gt_values.

gs_values-key = 'AB-'.
APPEND gs_values to gt_values.

gs_values-key = 'O+'.
APPEND gs_values to gt_values.

gs_values-key = 'O-'.
APPEND gs_values to gt_values.

*SORT gt_values by key.
Delete ADJACENT DUPLICATES FROM gt_values COMPARING key.

gv_idb = 'gs_emp_master-BLODD_GROUP'.

CALL FUNCTION 'VRM_SET_VALUES'
  EXPORTING
    id                    = gv_idb
    values                = gt_values
 EXCEPTIONS
   ID_ILLEGAL_NAME       = 1
   OTHERS                = 2.
IF sy-subrc <> 0.
* Implement suitable error handling here
  MESSAGE 'something wrong has happened, we need to debug what' type 'E'.
ENDIF.

CLEAR: gs_values, gt_values[].



""""""""""""""""""""

" city belonging to a state only.

CLEAR: gt_state_city.
*select DISTINCT ( state ) FROM zstate_city INTO CORRESPONDING FIELDS OF gt_state_city.
  select * FROM zstate_city INTO CORRESPONDING FIELDS OF TABLE gt_state_city.
    SORT gt_state_city by state.
    delete ADJACENT DUPLICATES FROM gt_state_city COMPARING state.

    loop at gt_state_city INTO gs_state_city.

      gs_values-key = gs_state_city-state.
      APPEND gs_values to gt_values.

      CLEAR: gs_state_city.


      ENDLOOP.


      SORT gt_values by key.
      Delete ADJACENT DUPLICATES FROM gt_values COMPARING key.

      gv_id = 'gs_emp_master-STATE'.

      CALL FUNCTION 'VRM_SET_VALUES'
        EXPORTING
          id                    = gv_id
          values                = gt_values
       EXCEPTIONS
         ID_ILLEGAL_NAME       = 1
         OTHERS                = 2.
      IF sy-subrc <> 0.
*       Implement suitable error handling here
        MESSAGE 'something wrong has happened, we need to debug what' type 'E'.
      ENDIF.


""""""""""""""

" Title

CLEAR: gt_values[], gs_values.

gs_values-key = 'M'.
APPEND gs_values to gt_values.

gs_values-key = 'S'.
APPEND gs_values to gt_values.

Delete ADJACENT DUPLICATES FROM gt_values COMPARING key.

gv_id = 'gs_emp_master-Marital_Status'.

CALL FUNCTION 'VRM_SET_VALUES'
  EXPORTING
    id                    = gv_id
    values                = gt_values
 EXCEPTIONS
   ID_ILLEGAL_NAME       = 1
   OTHERS                = 2.
IF sy-subrc <> 0.
* Implement suitable error handling here
  MESSAGE 'something wrong has happened, we need to debug what' type 'E'.
ENDIF.

CLEAR: gs_values, gt_values[].


ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  SET_STATE_CITY
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM set_state_city .

SELECT * FROM zstate_city INTO CORRESPONDING FIELDS OF TABLE gt_state_city
  WHERE state = gs_emp_master-STATE.

  CLEAR : gt_values[], gs_values.

  loop at gt_state_city INTO gs_state_city.
    gs_values-key = gs_state_city-city.
   APPEND gs_values to gt_values.
   CLEAR: gs_values.
   ENDLOOP.

   sort gt_values by key.
   DELETE ADJACENT DUPLICATES FROM gt_values COMPARING key.

   gv_id = 'gs_emp_master-city'.

         CALL FUNCTION 'VRM_SET_VALUES'
        EXPORTING
          id                    = gv_id
          values                = gt_values
       EXCEPTIONS
         ID_ILLEGAL_NAME       = 1
         OTHERS                = 2.
      IF sy-subrc <> 0.
*       Implement suitable error handling here
        MESSAGE 'something wrong has happened, we need to debug what' type 'E'.
      ENDIF.

      CLEAR: gs_values, gt_values[].

ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  FIELD_VALIDATION  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE field_validation INPUT.

" we want validation to happen when the user clicks on the save button.

case sy-ucomm.

  when 'SAVE'.
    if gs_emp_master-pan is INITIAL.
*      MESSAGE 'Enter the pancard number' type 'E'.

      MESSAGE E000(zemp_master).

      else.
        gv_len = strlen( gs_emp_master-pan ).

        if gv_len ne 10.
          MESSAGE 'Pan card should be of length 10' type 'E'.
          ENDIF.

     if gs_emp_master-marital_status = 'M' and gs_emp_master-SPOUSE is INITIAL.
       MESSAGE 'Spouse name is compulsory.' type 'E'.
       ENDIF.

     if gs_emp_master-doj is INITIAL.

       MESSAGE 'Date of joining is mandetory.' type 'E'.
       ENDIF.

    endif.
    ENDCASE.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0300  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0300 OUTPUT.
*  SET PF-STATUS 'xxxxxxxx'.
  SET TITLEBAR 'T4'.

  SELECT empid title first_name pan mobile1
    from zzemp_master2 INTO TABLE it_disp
    WHERE empid = gs_emp_master-empid.


ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0300  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0300 INPUT.
CASE sy-ucomm.
    WHEN 'EXT'.
      CALL SCREEN 0100.
  ENDCASE.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Form  SAVE_CONFIRMATION
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM save_confirmation .
CALL FUNCTION 'POPUP_TO_CONFIRM'
  EXPORTING
   TITLEBAR                    = 'Confirmation'
*   DIAGNOSE_OBJECT             = ' '
    text_question               = 'Do you want to save?'
   TEXT_BUTTON_1               = 'Yes'
*   ICON_BUTTON_1               = ' '
   TEXT_BUTTON_2               = 'No'
*   ICON_BUTTON_2               = ' '
*   DEFAULT_BUTTON              = '1'
   DISPLAY_CANCEL_BUTTON       = 'X'
*   USERDEFINED_F1_HELP         = ' '
*   START_COLUMN                = 25
*   START_ROW                   = 6
*   POPUP_TYPE                  =
*   IV_QUICKINFO_BUTTON_1       = ' '
*   IV_QUICKINFO_BUTTON_2       = ' '
 IMPORTING                             " in the return what we'll get, we'll get answer.
   ANSWER                      = gv_ans
* TABLES
*   PARAMETER                   =
 EXCEPTIONS
   TEXT_NOT_FOUND              = 1
   OTHERS                      = 2
          .
IF sy-subrc <> 0.
* Implement suitable error handling here
ENDIF.

ENDFORM.
*&---------------------------------------------------------------------*
*&      Form  CHANGE_LOG
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*  -->  p1        text
*  <--  p2        text
*----------------------------------------------------------------------*
FORM change_log .

select SINGLE * FROM zzemp_master INTO CORRESPONDING FIELDS OF gs_emp_master_o
  WHERE empid = p_empid.

  gv_objectid = p_empid.
  CONDENSE gv_objectid.

  CALL FUNCTION 'YZEMP_MASTER_WRITE_DOCUMENT' "
    EXPORTING
      objectid                      = GV_OBJECTID
      tcode                         = SY-TCODE
      utime                         = SY-UZEIT
      udate                         = SY-DATUM
      username                      = SY-UNAME
*     PLANNED_CHANGE_NUMBER         = ' '
     OBJECT_CHANGE_INDICATOR       = 'U'
*     PLANNED_OR_REAL_CHANGES       = ' '
*     NO_CHANGE_POINTERS            = ' '
*     UPD_ICDTXT_YZEMP_MASTER       = ' '
     N_ZZEMP_MASTER2               = GS_EMP_MASTER
     O_ZZEMP_MASTER2               = GS_EMP_MASTER_O
     UPD_ZZEMP_MASTER2             = 'U'
    TABLES
      icdtxt_yzemp_master           = GT_ICDTXT
            .


ENDFORM.
*&---------------------------------------------------------------------*
*&      Module  GET_DESIG  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE get_desig INPUT.

CLEAR: gt_desig[], gs_desig.

" not necessary the values need to be appended, rather the values could be read from some db table
" different conditions but the method would be the same.

gs_desig-DESIG = 'Jr. Consultant'.
APPEND gs_desig to gt_desig.

gs_desig-DESIG = 'Sr. Consultant'.
APPEND gs_desig to gt_desig.

gs_desig-DESIG = 'ASS. Consultant'.
APPEND gs_desig to gt_desig.

CALL FUNCTION 'F4IF_INT_TABLE_VALUE_REQUEST'
  EXPORTING
*   DDIC_STRUCTURE         = ' '
    retfield               = 'DESIG' " it field.
*   PVALKEY                = ' '
   DYNPPROG               = sy-cprog " program name
*   DYNPNR                 = ' '
   DYNPROFIELD            = 'GS_EMP_MASTER-DESIGNATION' "screen field name.
*   STEPL                  = 0
*   WINDOW_TITLE           =
*   VALUE                  = ' '
   VALUE_ORG              = 'S' "'C'
*   MULTIPLE_CHOICE        = ' '
*   DISPLAY                = ' '
*   CALLBACK_PROGRAM       = ' '
*   CALLBACK_FORM          = ' '
*   CALLBACK_METHOD        =
*   MARK_TAB               =
* IMPORTING
*   USER_RESET             =
  tables
    value_tab              = gt_desig
*   FIELD_TAB              =
*   RETURN_TAB             =
*   DYNPFLD_MAPPING        =
 EXCEPTIONS
   PARAMETER_ERROR        = 1
   NO_VALUES_FOUND        = 2
   OTHERS                 = 3
          .
IF sy-subrc <> 0.
* Implement suitable error handling here
  MESSAGE id sy-msgid TYPE sy-msgty NUMBER sy-msgno
  WITH sy-msgv1 sy-msgv2 sy-msgv3 sy-msgv4.
ENDIF.



ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  GET_F1_HELP  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE get_f1_help INPUT.

  refresh gt_text.
  CLEAR: gs_text.

  gs_text-tdformat = 'U1'.
  gs_text-tdline = 'F1 HELP DEMO'.
  APPEND gs_text to gt_text.

  gs_text-tdformat = '*'.
  gs_text-tdline = 'Select the textbox if employee is a manager.'.
  APPEND gs_text to gt_text.

  gs_text-tdformat = '*'.
  gs_text-tdline = 'If employee is not a manager dont check.'.
  APPEND gs_text to gt_text.

  CALL FUNCTION 'COPO_POPUP_TO_DISPLAY_TEXTLIST'
    EXPORTING
*     TASK             = 'DISPLAY'
      titel            = 'F1 Help for manager'
*   IMPORTING
*     FUNCTION         =
    tables
      text_table       = gt_text.


  CLEAR gs_text.

ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  STATUS_0200  OUTPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE status_0200 OUTPUT.
  SET PF-STATUS 'PF22'.
  SET TITLEBAR 'T22'.
ENDMODULE.
*&---------------------------------------------------------------------*
*&      Module  USER_COMMAND_0200  INPUT
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
MODULE user_command_0200 INPUT.

  CASE sy-ucomm.

    when 'EXIT' OR 'BACK' OR 'CLOSE' OR 'CANCEL'.
      SET SCREEN 0.

      ENDCASE.

ENDMODULE.

*&SPWIZARD: DECLARATION OF TABLECONTROL 'TC1' ITSELF
CONTROLS: TC1 TYPE TABLEVIEW USING SCREEN 0200.

*&SPWIZARD: LINES OF TABLECONTROL 'TC1'
DATA:     G_TC1_LINES  LIKE SY-LOOPC.

DATA:     OK_CODE LIKE SY-UCOMM.

*&SPWIZARD: OUTPUT MODULE FOR TC 'TC1'. DO NOT CHANGE THIS LINE!
*&SPWIZARD: UPDATE LINES FOR EQUIVALENT SCROLLBAR
MODULE TC1_CHANGE_TC_ATTR OUTPUT.
  DESCRIBE TABLE GT_FAMILY LINES TC1-lines.



  if gt_family[] is INITIAL. " here we are appending blank lines.

    CLEAR gs_family.

  do 4 times.
    APPEND gs_family to gt_family.
    ENDDO.

    ENDIF.

ENDMODULE.

*&SPWIZARD: OUTPUT MODULE FOR TC 'TC1'. DO NOT CHANGE THIS LINE!
*&SPWIZARD: GET LINES OF TABLECONTROL
MODULE TC1_GET_LINES OUTPUT.
  G_TC1_LINES = SY-LOOPC.
ENDMODULE.

*&SPWIZARD: INPUT MODULE FOR TC 'TC1'. DO NOT CHANGE THIS LINE!
*&SPWIZARD: MODIFY TABLE
MODULE TC1_MODIFY INPUT.
  MODIFY GT_FAMILY
    FROM GS_FAMILY
    INDEX TC1-CURRENT_LINE.
ENDMODULE.

*&SPWIZARD: INPUT MODUL FOR TC 'TC1'. DO NOT CHANGE THIS LINE!
*&SPWIZARD: MARK TABLE
MODULE TC1_MARK INPUT.
  DATA: g_TC1_wa2 like line of GT_FAMILY.
    if TC1-line_sel_mode = 1
    and GS_FAMILY-MARK = 'X'.
     loop at GT_FAMILY into g_TC1_wa2
       where MARK = 'X'.
       g_TC1_wa2-MARK = ''.
       modify GT_FAMILY
         from g_TC1_wa2
         transporting MARK.
     endloop.
  endif.
  MODIFY GT_FAMILY
    FROM GS_FAMILY
    INDEX TC1-CURRENT_LINE
    TRANSPORTING MARK.
ENDMODULE.

*&SPWIZARD: INPUT MODULE FOR TC 'TC1'. DO NOT CHANGE THIS LINE!
*&SPWIZARD: PROCESS USER COMMAND
MODULE TC1_USER_COMMAND INPUT.
  OK_CODE = SY-UCOMM.
  PERFORM USER_OK_TC USING    'TC1'
                              'GT_FAMILY'
                              'MARK'
                     CHANGING OK_CODE.
  SY-UCOMM = OK_CODE.
ENDMODULE.

*----------------------------------------------------------------------*
*   INCLUDE TABLECONTROL_FORMS                                         *
*----------------------------------------------------------------------*

*&---------------------------------------------------------------------*
*&      Form  USER_OK_TC                                               *
*&---------------------------------------------------------------------*
 FORM USER_OK_TC USING    P_TC_NAME TYPE DYNFNAM
                          P_TABLE_NAME
                          P_MARK_NAME
                 CHANGING P_OK      LIKE SY-UCOMM.

*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
   DATA: L_OK              TYPE SY-UCOMM,
         L_OFFSET          TYPE I.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

*&SPWIZARD: Table control specific operations                          *
*&SPWIZARD: evaluate TC name and operations                            *
   SEARCH P_OK FOR P_TC_NAME.
   IF SY-SUBRC <> 0.
     EXIT.
   ENDIF.
   L_OFFSET = STRLEN( P_TC_NAME ) + 1.
   L_OK = P_OK+L_OFFSET.
*&SPWIZARD: execute general and TC specific operations                 *
   CASE L_OK.
     WHEN 'INSR'.                      "insert row
       PERFORM FCODE_INSERT_ROW USING    P_TC_NAME
                                         P_TABLE_NAME.
       CLEAR P_OK.

     WHEN 'DELE'.                      "delete row
       PERFORM FCODE_DELETE_ROW USING    P_TC_NAME
                                         P_TABLE_NAME
                                         P_MARK_NAME.
       CLEAR P_OK.

     WHEN 'P--' OR                     "top of list
          'P-'  OR                     "previous page
          'P+'  OR                     "next page
          'P++'.                       "bottom of list
       PERFORM COMPUTE_SCROLLING_IN_TC USING P_TC_NAME
                                             L_OK.
       CLEAR P_OK.
*     WHEN 'L--'.                       "total left
*       PERFORM FCODE_TOTAL_LEFT USING P_TC_NAME.
*
*     WHEN 'L-'.                        "column left
*       PERFORM FCODE_COLUMN_LEFT USING P_TC_NAME.
*
*     WHEN 'R+'.                        "column right
*       PERFORM FCODE_COLUMN_RIGHT USING P_TC_NAME.
*
*     WHEN 'R++'.                       "total right
*       PERFORM FCODE_TOTAL_RIGHT USING P_TC_NAME.
*
     WHEN 'MARK'.                      "mark all filled lines
       PERFORM FCODE_TC_MARK_LINES USING P_TC_NAME
                                         P_TABLE_NAME
                                         P_MARK_NAME   .
       CLEAR P_OK.

     WHEN 'DMRK'.                      "demark all filled lines
       PERFORM FCODE_TC_DEMARK_LINES USING P_TC_NAME
                                           P_TABLE_NAME
                                           P_MARK_NAME .
       CLEAR P_OK.

*     WHEN 'SASCEND'   OR
*          'SDESCEND'.                  "sort column
*       PERFORM FCODE_SORT_TC USING P_TC_NAME
*                                   l_ok.

   ENDCASE.

 ENDFORM.                              " USER_OK_TC

*&---------------------------------------------------------------------*
*&      Form  FCODE_INSERT_ROW                                         *
*&---------------------------------------------------------------------*
 FORM fcode_insert_row
               USING    P_TC_NAME           TYPE DYNFNAM
                        P_TABLE_NAME             .

*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
   DATA L_LINES_NAME       LIKE FELD-NAME.
   DATA L_SELLINE          LIKE SY-STEPL.
   DATA L_LASTLINE         TYPE I.
   DATA L_LINE             TYPE I.
   DATA L_TABLE_NAME       LIKE FELD-NAME.
   FIELD-SYMBOLS <TC>                 TYPE CXTAB_CONTROL.
   FIELD-SYMBOLS <TABLE>              TYPE STANDARD TABLE.
   FIELD-SYMBOLS <LINES>              TYPE I.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

   ASSIGN (P_TC_NAME) TO <TC>.

*&SPWIZARD: get the table, which belongs to the tc                     *
   CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
   ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline

*&SPWIZARD: get looplines of TableControl                              *
   CONCATENATE 'G_' P_TC_NAME '_LINES' INTO L_LINES_NAME.
   ASSIGN (L_LINES_NAME) TO <LINES>.

*&SPWIZARD: get current line                                           *
   GET CURSOR LINE L_SELLINE.
   IF SY-SUBRC <> 0.                   " append line to table
     L_SELLINE = <TC>-LINES + 1.
*&SPWIZARD: set top line                                               *
     IF L_SELLINE > <LINES>.
       <TC>-TOP_LINE = L_SELLINE - <LINES> + 1 .
     ELSE.
       <TC>-TOP_LINE = 1.
     ENDIF.
   ELSE.                               " insert line into table
     L_SELLINE = <TC>-TOP_LINE + L_SELLINE - 1.
     L_LASTLINE = <TC>-TOP_LINE + <LINES> - 1.
   ENDIF.
*&SPWIZARD: set new cursor line                                        *
   L_LINE = L_SELLINE - <TC>-TOP_LINE + 1.

*&SPWIZARD: insert initial line                                        *
   INSERT INITIAL LINE INTO <TABLE> INDEX L_SELLINE.
   <TC>-LINES = <TC>-LINES + 1.
*&SPWIZARD: set cursor                                                 *
   SET CURSOR LINE L_LINE.

 ENDFORM.                              " FCODE_INSERT_ROW

*&---------------------------------------------------------------------*
*&      Form  FCODE_DELETE_ROW                                         *
*&---------------------------------------------------------------------*
 FORM fcode_delete_row
               USING    P_TC_NAME           TYPE DYNFNAM
                        P_TABLE_NAME
                        P_MARK_NAME   .

*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
   DATA L_TABLE_NAME       LIKE FELD-NAME.

   FIELD-SYMBOLS <TC>         TYPE cxtab_control.
   FIELD-SYMBOLS <TABLE>      TYPE STANDARD TABLE.
   FIELD-SYMBOLS <WA>.
   FIELD-SYMBOLS <MARK_FIELD>.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

   ASSIGN (P_TC_NAME) TO <TC>.

*&SPWIZARD: get the table, which belongs to the tc                     *
   CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
   ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline

*&SPWIZARD: delete marked lines                                        *
   DESCRIBE TABLE <TABLE> LINES <TC>-LINES.

   LOOP AT <TABLE> ASSIGNING <WA>.

*&SPWIZARD: access to the component 'FLAG' of the table header         *
     ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE <WA> TO <MARK_FIELD>.

     IF <MARK_FIELD> = 'X'.
       DELETE <TABLE> INDEX SYST-TABIX.
       IF SY-SUBRC = 0.
         <TC>-LINES = <TC>-LINES - 1.
       ENDIF.
     ENDIF.
   ENDLOOP.

 ENDFORM.                              " FCODE_DELETE_ROW

*&---------------------------------------------------------------------*
*&      Form  COMPUTE_SCROLLING_IN_TC
*&---------------------------------------------------------------------*
*       text
*----------------------------------------------------------------------*
*      -->P_TC_NAME  name of tablecontrol
*      -->P_OK       ok code
*----------------------------------------------------------------------*
 FORM COMPUTE_SCROLLING_IN_TC USING    P_TC_NAME
                                       P_OK.
*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
   DATA L_TC_NEW_TOP_LINE     TYPE I.
   DATA L_TC_NAME             LIKE FELD-NAME.
   DATA L_TC_LINES_NAME       LIKE FELD-NAME.
   DATA L_TC_FIELD_NAME       LIKE FELD-NAME.

   FIELD-SYMBOLS <TC>         TYPE cxtab_control.
   FIELD-SYMBOLS <LINES>      TYPE I.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

   ASSIGN (P_TC_NAME) TO <TC>.
*&SPWIZARD: get looplines of TableControl                              *
   CONCATENATE 'G_' P_TC_NAME '_LINES' INTO L_TC_LINES_NAME.
   ASSIGN (L_TC_LINES_NAME) TO <LINES>.


*&SPWIZARD: is no line filled?                                         *
   IF <TC>-LINES = 0.
*&SPWIZARD: yes, ...                                                   *
     L_TC_NEW_TOP_LINE = 1.
   ELSE.
*&SPWIZARD: no, ...                                                    *
     CALL FUNCTION 'SCROLLING_IN_TABLE'
          EXPORTING
               ENTRY_ACT             = <TC>-TOP_LINE
               ENTRY_FROM            = 1
               ENTRY_TO              = <TC>-LINES
               LAST_PAGE_FULL        = 'X'
               LOOPS                 = <LINES>
               OK_CODE               = P_OK
               OVERLAPPING           = 'X'
          IMPORTING
               ENTRY_NEW             = L_TC_NEW_TOP_LINE
          EXCEPTIONS
*              NO_ENTRY_OR_PAGE_ACT  = 01
*              NO_ENTRY_TO           = 02
*              NO_OK_CODE_OR_PAGE_GO = 03
               OTHERS                = 0.
   ENDIF.

*&SPWIZARD: get actual tc and column                                   *
   GET CURSOR FIELD L_TC_FIELD_NAME
              AREA  L_TC_NAME.

   IF SYST-SUBRC = 0.
     IF L_TC_NAME = P_TC_NAME.
*&SPWIZARD: et actual column                                           *
       SET CURSOR FIELD L_TC_FIELD_NAME LINE 1.
     ENDIF.
   ENDIF.

*&SPWIZARD: set the new top line                                       *
   <TC>-TOP_LINE = L_TC_NEW_TOP_LINE.


 ENDFORM.                              " COMPUTE_SCROLLING_IN_TC

*&---------------------------------------------------------------------*
*&      Form  FCODE_TC_MARK_LINES
*&---------------------------------------------------------------------*
*       marks all TableControl lines
*----------------------------------------------------------------------*
*      -->P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
FORM FCODE_TC_MARK_LINES USING P_TC_NAME
                               P_TABLE_NAME
                               P_MARK_NAME.
*&SPWIZARD: EGIN OF LOCAL DATA-----------------------------------------*
  DATA L_TABLE_NAME       LIKE FELD-NAME.

  FIELD-SYMBOLS <TC>         TYPE cxtab_control.
  FIELD-SYMBOLS <TABLE>      TYPE STANDARD TABLE.
  FIELD-SYMBOLS <WA>.
  FIELD-SYMBOLS <MARK_FIELD>.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (P_TC_NAME) TO <TC>.

*&SPWIZARD: get the table, which belongs to the tc                     *
   CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
   ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline

*&SPWIZARD: mark all filled lines                                      *
  LOOP AT <TABLE> ASSIGNING <WA>.

*&SPWIZARD: access to the component 'FLAG' of the table header         *
     ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE <WA> TO <MARK_FIELD>.

     <MARK_FIELD> = 'X'.
  ENDLOOP.
ENDFORM.                                          "fcode_tc_mark_lines

*&---------------------------------------------------------------------*
*&      Form  FCODE_TC_DEMARK_LINES
*&---------------------------------------------------------------------*
*       demarks all TableControl lines
*----------------------------------------------------------------------*
*      -->P_TC_NAME  name of tablecontrol
*----------------------------------------------------------------------*
FORM FCODE_TC_DEMARK_LINES USING P_TC_NAME
                                 P_TABLE_NAME
                                 P_MARK_NAME .
*&SPWIZARD: BEGIN OF LOCAL DATA----------------------------------------*
  DATA L_TABLE_NAME       LIKE FELD-NAME.

  FIELD-SYMBOLS <TC>         TYPE cxtab_control.
  FIELD-SYMBOLS <TABLE>      TYPE STANDARD TABLE.
  FIELD-SYMBOLS <WA>.
  FIELD-SYMBOLS <MARK_FIELD>.
*&SPWIZARD: END OF LOCAL DATA------------------------------------------*

  ASSIGN (P_TC_NAME) TO <TC>.

*&SPWIZARD: get the table, which belongs to the tc                     *
   CONCATENATE P_TABLE_NAME '[]' INTO L_TABLE_NAME. "table body
   ASSIGN (L_TABLE_NAME) TO <TABLE>.                "not headerline

*&SPWIZARD: demark all filled lines                                    *
  LOOP AT <TABLE> ASSIGNING <WA>.

*&SPWIZARD: access to the component 'FLAG' of the table header         *
     ASSIGN COMPONENT P_MARK_NAME OF STRUCTURE <WA> TO <MARK_FIELD>.

     <MARK_FIELD> = SPACE.
  ENDLOOP.
ENDFORM.                                          "fcode_tc_mark_lines
